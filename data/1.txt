import keras
from keras.layers import Dense, Flatten, Dropout
from keras.models import Model
from keras.applications.vgg16 import VGG16
from keras import backend as K
import matplotlib.pyplot as plt
from PIL import Image
import numpy as np
import random
import shutil
import math
import cv2
import os



batch_size = 32 
num_classes = 2 
base_lr = 1e-3 
num_epoch = 30  
img_height = img_width = 224  
channel = 3  
seed = random.randint(0, 100) 
test_batch_size = 10  

checkpoint_path = r'C:\Users\spywalk\Desktop\input_pipeline\checkpoints\weights.'  

# test_data generator
test_datagen = keras.preprocessing.image.ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
    'data/test/',
    target_size=(img_width, img_height),
    color_mode='rgb',
    batch_size=test_batch_size,
    class_mode=None,
    shuffle=False,
    seed=seed)



data_gen_args = dict(rescale=1./255,
                     rotation_range=5,
                     shear_range=0.2,
                     zoom_range=0.2,
                     vertical_flip=True,
                     horizontal_flip=True)

train_datagen = keras.preprocessing.image.ImageDataGenerator(**data_gen_args)

train_generator = train_datagen.flow_from_directory(
        'data/train/',
        target_size=(img_width, img_height),
        batch_size=batch_size,
        class_mode='categorical',
        color_mode='rgb',
        shuffle=True)

val_datagen = keras.preprocessing.image.ImageDataGenerator(rescale=1./255)
validation_generator = val_datagen.flow_from_directory(
        'data/val/',
        target_size=(img_width, img_height),
        batch_size=batch_size,
        class_mode='categorical',
        color_mode='rgb',
        shuffle=True)


model = keras.applications.vgg16.VGG16(include_top=False, input_shape=(img_height, img_width, channel))
x = layers.Flatten()(model.output)                        
x = layers.Dense(512, activation='relu')(x)
x = layers.Dense(512, activation='relu')(x)
x = layers.Dense(5, activation='softmax')(x)    
network = Model(inputs=model.input, outputs=x)
network ()

optim = keras.optimizers.Adadelta(lr=1.0, rho=0.95, epsilon=1e-08, decay=0.0)
custom_model.compile(loss='categorical_crossentropy', optimizer=optim, metrics=['accuracy'])




STEP_SIZE_TRAIN = train_generator.n//train_generator.batch_size
STEP_SIZE_VALID = validation_generator.n//validation_generator.batch_size
# training with fit_generator
# you may stop training if the model achieved val_accuracy=98.XXX% & val_loss=0.0XXX (cat & dog)
history = network .fit_generator(generator=train_generator,
                                     steps_per_epoch=STEP_SIZE_TRAIN,
                                     validation_data=validation_generator,
                                     validation_steps=STEP_SIZE_VALID,
                                     epochs=num_epoch,
                                     callbacks=callbacks,
                                     initial_epoch=0,
                                     verbose=1,
                                     workers=1)


# plot model loss & save
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.savefig('VGG16_custom_model_loss_summary_graph.png')
plt.show()


# plot model accuracy & save
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.savefig('VGG16_custom_model_accuracy_summary_graph.png')
plt.show()

def preprocess_image(path=test_image_path):
    img = Image.open(path)
    img = img.resize((img_height, img_width), Image.BICUBIC)
    if img.mode != 'RGB':
        img = img.convert('RGB')
    x = np.asarray(img)  
    x = x / 255.
    batch_x = np.asarray([x])  
    return batch_x


img = preprocess_image(test_image_path)
predict = network.predict(img)
index = np.argmaxpredict [0], axis=0)
answer= list(train_generator.class_indices.keys())[index]   



img_bgr = cv2.imread(test_image_path)
img_rgb = img_bgr[:,:,::-1]
plt.imshow(img_rgb)
plt.show()
