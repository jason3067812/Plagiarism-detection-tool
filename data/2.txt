import keras
from keras.layers import Dense, Flatten, Dropout
from keras.models import Model
from keras.preprocessing import image
import matplotlib.pyplot as plt
from PIL import Image
import numpy as np
import random
import shutil
import math
import cv2
import os


train_path = r'C:\Users\user\Desktop\flowersVGG\train'
val_path = r'C:\Users\user\Desktop\flowersVGG\val'
test_image_path = r'C:\Users\user\Desktop\flowersVGG\train\daisy\daisy0.jpg' 
num_classes = 2 
num_epoch = 20 
batch_size = 32 
img_height = img_width = 224  
channel = 3 
seed = random.randint(0, 100) 

def data_generater(path, img_width, img_height):
    data_gen_args = dict(rescale=1./255,
                         rotation_range=5,
                         shear_range=0.2,
                         zoom_range=0.2,
                         vertical_flip=True,
                         horizontal_flip=True)
    # train data generator
    train_datagen = image.ImageDataGenerator(**data_gen_args)

    data = train_datagen.flow_from_directory(
            path,
            target_size=(img_width, img_height),
            batch_size=batch_size,
            class_mode='categorical',
            color_mode='rgb',
            shuffle=True)
    return data
    

train_generator = data_generater(train_path, img_width, img_height)
val_generator = data_generater(val_path, img_width, img_height)

model = keras.applications.resnet50.ResNet50(include_top=False, input_shape=(img_height, img_width, channel))
x = layers.Flatten()(model.output)                        
x = layers.Dense(512, activation='relu')(x)
x = layers.Dense(512, activation='relu')(x)
x = layers.Dense(5, activation='softmax')(x)                     

network = keras.Model(inputs=model.input, outputs=x)

network.compile(optimizer='adam',     
               loss='categorical_crossentropy',
               metrics=['accuracy'])
network.summary()

STEP_SIZE_TRAIN = train_generator.n//train_generator.batch_size
STEP_SIZE_VALID = val_generator.n//val_generator.batch_size

history = network.fit_generator(generator=train_generator,
                                     steps_per_epoch=STEP_SIZE_TRAIN,
                                     validation_data=val_generator,
                                     validation_steps=STEP_SIZE_VALID,
                                     epochs=num_epoch,
                                     initial_epoch=0,
                                     verbose=1,
                                     workers=1)


# plot model loss & save
plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.savefig('VGG16_custom_model_loss_summary_graph.png')
plt.show()


# plot model accuracy & save
plt.plot(history.history['acc'])
plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.savefig('VGG16_custom_model_accuracy_summary_graph.png')
plt.show()

def preprocess_image(path=test_image_path):
    img = Image.open(path)
    img = img.resize((img_height, img_width), Image.BICUBIC)
    if img.mode != 'RGB':
        img = img.convert('RGB')
    x = np.asarray(img)  
    x = x / 255.
    batch_x = np.asarray([x])  
    return batch_x


img = preprocess_image(test_image_path)
mth2_predicted = network.predict(img)
mth2_index = np.argmax(mth2_predicted[0], axis=0)
mth2_predicted_answer = list(train_generator.class_indices.keys())[mth2_index]   # get the class name you predicted



img_bgr = cv2.imread(test_image_path)
img_rgb = img_bgr[:,:,::-1]
plt.imshow(img_rgb)
plt.show()


print('Predict this image as \"{}\"\n'.format(mth2_predicted_answer))
for label in range(len(train_generator.class_indices)):
    print('The probability that this is a {} is: {:.8f}\n'.format(list(train_generator.class_indices.keys())[label],
                                                                  mth2_predicted[0][label]))
